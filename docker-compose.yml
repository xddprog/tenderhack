version: "3.0"

services:    
  db:
    image: postgres:15
    container_name: db-store
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    container_name: frontend-store
    ports:
      - "3000:3000"
    depends_on:
      - app 
    restart: always
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - /etc/nginx/sites-available/tenderhack:/etc/nginx/conf.d/tenderhack.conf
    ports:
      - "80:80"
    depends_on:
      - app
      - frontend
    networks:
      - app-network

  app:
    build:
      context: ./backend
    network_mode: "host"
    container_name: app-store
    environment:
      - DB_NAME=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=postgres
      - JWT_SECRET=812659050808fd763749156b9b403c46a2338f082b4cc1316d3b0ac8794937aa
      - JWT_ACCESS_TOKEN_TIME=10000
      - JWT_ALGORITHM=HS256
      - JWT_REFRESH_TOKEN_TIME=3
      - NEXT_PUBLIC_API_BASE_URL="/api/v1/"
      - NEXT_PUBLIC_WS_BASE_URL="/api/v1/"
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network
    depends_on:
      - db
    restart: always

networks:
  app-network:
    driver: bridge